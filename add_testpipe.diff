Index: src/initng_fork.c
===================================================================
--- src/initng_fork.c	(revision 4293)
+++ src/initng_fork.c	(working copy)
@@ -61,6 +61,14 @@
 		return (-1);
 	}
 
+	if (pipe(process->test_pipe) != 0)
+	{
+		F_("Failed adding test pipe ! %s\n", strerror(errno));
+		return (-1);
+	}
+
+
+
 	/* alloc buffer */
 	if (process->buffer)
 	{
@@ -116,21 +124,28 @@
 			/*close(STDIN_FILENO); */
 			close(STDOUT_FILENO);
 			close(STDERR_FILENO);
+			close(3);
 
 			/* Duplicate stdout and stderr to the stdout[1] */
 			dup2(process->out_pipe[1], STDOUT_FILENO);
 			dup2(process->out_pipe[1], STDERR_FILENO);
+			dup2(process->test_pipe[1], 3);
 
 			/* set stdin, stdout, and stderr, that is should not be closed, if this child do execve() */
 			fcntl(STDIN_FILENO, F_SETFD, 0);
 			fcntl(STDOUT_FILENO, F_SETFD, 0);
 			fcntl(STDERR_FILENO, F_SETFD, 0);
+			fcntl(3, F_SETFD, 0);
 
 			/* Close the sides of the pipes we don't need, as we're in fork we won't need this part. */
 			if (process->out_pipe[0] > 0)
 				close(process->out_pipe[0]);
 			process->out_pipe[0] = -1;
 
+			if (process->test_pipe[0] > 0)
+				close(process->test_pipe[0]);
+			process->test_pipe[0] = -1;
+
 		}
 
 		/* There might be plug-ins that will work here */
@@ -148,7 +163,7 @@
 		{
 			int i;
 
-			for (i = 3; i <= 1013; i++)
+			for (i = 4; i <= 1013; i++)
 				close(i);
 		}
 
@@ -168,6 +183,10 @@
 		if (process->out_pipe[1] > 0)
 			close(process->out_pipe[1]);
 		process->out_pipe[1] = -1;
+		if (process->test_pipe[1] > 0)
+			close(process->test_pipe[1]);
+		process->test_pipe[1] = -1;
+
 		if (pid_fork > 0)
 		{
 			process->pid = pid_fork;
Index: src/initng_process_db.h
===================================================================
--- src/initng_process_db.h	(revision 4293)
+++ src/initng_process_db.h	(working copy)
@@ -56,6 +56,7 @@
 	 */
 	int r_code;
 	int out_pipe[2];			/* pipes of process */
+	int test_pipe[2];
 	char *buffer;				/* stdout buffer ## THE BEGINNING ## */
 	int buffer_allocated;		/* chars right now allocated for this buffer */
 	int buffer_len;				/* the count of chars from the beginning in buffer right now */
Index: src/initng_fd.c
===================================================================
--- src/initng_fd.c	(revision 4293)
+++ src/initng_fd.c	(working copy)
@@ -326,6 +326,12 @@
 				FD_SET(currentP->out_pipe[0], &readset);
 				added++;
 			}
+
+			if (currentP->test_pipe[0] > 2)
+			{
+				FD_SET(currentP->test_pipe[0], &readset);
+				added++;
+			}
 		}
 	}
 
@@ -429,6 +435,34 @@
 				if (retval == 0)
 					return;
 			}
+
+			if (currentP->test_pipe[0] > 2
+				&& FD_ISSET(currentP->test_pipe[0], &readset))
+			{
+				char b[1025];
+				int ii;
+				
+				printf("service %s test_pipe[%i] set, \n" ,currentA->name, currentP->test_pipe[0]);
+				D_("Will read test from %s->test on fd #%i\n",
+				   currentA->name, currentP->test_pipe[0]);
+				ii= read(currentP->test_pipe[0], b, 1024);
+				if(ii>0)
+				{
+					b[ii]='\0';
+					printf("got: %s\n",b);
+				}
+				
+				if(ii==0) /* EOF */
+				{
+					close(currentP->test_pipe[0]);
+					currentP->test_pipe[0]=-1;
+				}
+					
+				
+				retval--;
+				if(retval == 0) 
+					return;
+			}
 		}
 	}
 
