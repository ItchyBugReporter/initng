# Jamrules -- the rule boilerplate for InitNG
# Copyright (C) 2009  Eric MSP Veith <eveith@wwweb-library.net>
# Licensed under GNU GPL v3, see the included file "COPYING" for details.
#
# This file contains predefined variables available throughout the whole build
# process as well as some rules needed for creating the executables and
# libraries.
# Normally, a packager or quite anyone building InitNG doesn't have to change
# anything in here, but can rely on environmental variables or the -s
# parameter to jam, e.g. OPTIM="" for compiler optimization flags.
# If you have to change something in here to make InitNG build, it is probably
# a bug, and you should contact the author of the build system.
#


# Configuration variables for the build that will later on be in config.h or
# initng-paths.h
VERSION = 0.7.0svn ;
VERSION_NAME = "Bleeding Edge" ;
RUNLEVEL_DEFAULT = runlevel/default ;
RUNLEVEL_FAKE = runlevel/fake-default ;

# Modules to be built
MODULES ?= also chdir chroot conflict cpout critical ctrlaltdel daemon_clean
    dbus_event debug_commands fmon fstat history idleprobe initctl interactive
    last limit lockfile logfile netdev ngc4 ngcs nge pause provide reload
    renice service_file simple_launcher stcmd stdout suid syncron syslog
    sysreq task unneeded ;
MODULES += service daemon runlevel ;


DESTDIR ?= "" ;
prefix ?= / ;
bindir ?= $(prefix)/bin ;
sbindir ?= $(prefix)/sbin ;
libdir ?= $(prefix)/lib ;
moddir ?= $(libdir)/initng ;
mandir ?= $(prefix)/share/man ;
sysconfdir ?= $(prefix)/etc ;
localstatedir ?= $(prefix)/var ;

# Cflags, defines and linker flags:
CCFLAGS += -std=c99 -Wall -O2 ;
CCFLAGS += -g -Werror -Wmissing-prototypes -Wmissing-declarations
    -Wstrict-prototypes -Wimplicit -Wredundant-decls -Wnested-externs
    -Wwrite-strings -Wsign-compare -Winline -Wswitch -Wreturn-type
    -Wparentheses -Wmissing-braces -Wformat -Wformat-nonliteral
    -Wformat-security -Wsequence-point -Wundef -Wunused -Wcomment ;
DEFINES += HAVE_CONFIG_H _XOPEN_SOURCE=600 DEBUG ;
LINKFLAGS += -rdynamic -fPIC ;

# Header/linker flags specific for certain modules
DBUS_INCLUDES = /usr/include/dbus-1.0 /usr/lib/dbus-1.0/include ;
DBUS_LIBS = -ldbus-1 ;

# config.h defines that are configurable by the user
if $(CHECK_RO)
{
    DEFINES += CHECK_RO ;
}
if $(FORCE_NOCOLOR)
{
    DEFINES += FORCE_NOCOLOR ;
}
if $(FORCE_POSIX_IFILES)
{
    DEFINES += FORCE_POSIX_IFILES ;
}


# Builds a static library from a set of subdirectories given as arguments to
# this rule. It takes care of creating the objects in the right place,
# cleaning up and running Ar. It does not, however, handle recursion.
rule LibraryFromSubdirs
{
    local _o = [ ObjectsFromSubdir $(>) ] ;
    LibraryFromObjects $(<) : $(_o) ;
}


# Does pretty much the same as LibraryFromSubdirs, but creates an executable
# instead.
rule MainFromSubdirs
{
    local _o = [ ObjectsFromSubdir $(>) ] ;
    MainFromObjects $(<) : $(_o) ;
}


# Workhouse for subdir compile. Iterates over all subdirectories given and
# turns the *.c sources found there into objects. Returns a list of all
# objects created.
# USAGE: ObjectsFromSubdir foo bar baz ;
rule ObjectsFromSubdir
{
    local _sources _objects _subdir ;
    
    for _subdir in $(<)
    {
        # Get all source files
        _sources = [ Glob [ FDirName $(SUBDIR) $(_subdir) ] : *.c ] ;

        # Adjust grist (otherwise we get $(SUBDIR) twice)
        _sources = $(_sources:D=$(_subdir)) ;

        # Keep track of the objects we're about to create
        _objects += $(_sources:S=$(SUFOBJ)) ;

        # Do the actual compile
        Objects $(_sources) ;
    }

    Clean clean : $(_objects) ;
    return $(_objects) ;
}


# Creates an InitNG module from a given subdirectory. Will automatically link
# it against libinitng.a, and build a shared library named by the scheme
# "mod$(SUBDIR)$(SUF)".
rule ModuleFromSubdir
{
    local _lib = mod$(<).so ;
    local _obj = [ ObjectsFromSubdir $(<) ] ;

    LINKFLAGS on $(_lib) += -fPIC -rdynamic 
        -shared -Wl,-soname,$(_lib)
        -Wl,--whole-archive [ FDirName $(TOP) core libinitng$(SUFLIB) ] 
        -Wl,--no-whole-archive -ldl ;
    MainFromObjects $(_lib) : $(_obj) ;

    Clean clean : $(_lib) ;
    return $(_lib) ;
}


# Creates the config.h file from config.h.in.
actions GenHeaders
{
    for h in $(<).in
    do
        cat "$h" | sed \
                -e 's,@VERSION@,$(VERSION),g' \
                -e 's,@VERSION_NAME@,$(VERSION_NAME),g' \
                -e 's,@RUNLEVEL_DEFAULT@,$(RUNLEVEL_DEFAULT),g' \
                -e 's,@RUNLEVEL_FAKE@,$(RUNLEVEL_FAKE),g' \
                -e 's,@PREFIX@,$(prefix),g' \
                -e 's,@BINDIR@,$(bindir),g' \
                -e 's,@LIBDIR@,$(libdir),g' \
                -e 's,@SYSCONFDIR@,$(sysconfdir),g' \
                -e 's,@LOCALSTATEDIR@,$(localstatedir),g' \
            > "${h%*.in}"
    done
}

rule GenHeader
{
    GenHeaders $(<) ;
    Clean clean : $(<) ;
}


# Sets up housekeeping for the typical InitNG module. It awaits the name of
# the modules and guesses the path from it, i.e. $(TOP)/modules/$(1). 
# It does the following things:
#   - Uses "SubDir" to set up sub directory housekeeping,
#   - automatically sets the include path to "TOP include" and "TOP include
#     initng",
#   - sets the linker flags for the target shared library,
#   - marks the object files and the shared library for deletion on cleanup,
#   - marks the shared library for installation in InitNG's target lib
#     directory, and
#   - sets up the variables MOD_SRC and MOD_NAME to contain the module's
#     source files and the module's final file name.
rule ModDir
{
    SubDir TOP modules $(1) ;
    DEPENDS libinitng.a ;

    MOD_NAME = mod$(1).so ;
    MOD_SRC = [ Glob [ FDirName $(TOP) modules $(1) ] : *.c ] ;

    SubDirHdrs $(TOP) ;
    SubDirHdrs $(TOP) include ;
    SubDirHdrs $(TOP) include initng ;

    LINKFLAGS on $(MOD_NAME) += -fPIC -rdynamic 
        -shared -Wl,-soname,$(MOD_NAME)
        -Wl,--whole-archive [ FDirName $(TOP) core libinitng$(SUFLIB) ] 
        -Wl,--no-whole-archive -ldl ;

    Clean clean : $(MOD_NAME) $(MOD_SRC:S=$(SUFOBJ)) ;
}
