# Jamrules -- the rule boilerplate for InitNG
# Copyright (C) 2009  Eric MSP Veith <eveith@wwweb-library.net>
# Licensed under GNU GPL v3, see the included file "COPYING" for details.
#
# This file contains predefined variables available throughout the whole build
# process as well as some rules needed for creating the executables and
# libraries.
# Normally, a packager or quite anyone building InitNG doesn't have to change
# anything in here, but can rely on environmental variables or the -s
# parameter to jam, e.g. OPTIM="" for compiler optimization flags.
# If you have to change something in here to make InitNG build, it is probably
# a bug, and you should contact the author of the build system.
#


### PART 1: CONFIGURATION VARIABLES
#
# This part defines a bunch of variables that are used throughout the build
# and describe certain features of InitNG, like the version number, the name,
# installation paths, and so on.
#
# These are defaults; please don't change them here unless you intent the
# change to be permanent. Use environment variables or Jam's "-s" parameter
# instead.
#

# Configuration variables for the build that will later on be in config.h or
# initng-paths.h
VERSION = 0.7.0svn ;
VERSION_NAME = "Bleeding Edge" ;
RUNLEVEL_DEFAULT = runlevel/default ;
RUNLEVEL_FAKE = runlevel/fake-default ;

# Paths used for installation.
DESTDIR ?= ;
prefix ?= / ;
bindir ?= $(prefix)/bin ;
sbindir ?= $(prefix)/sbin ;
libdir ?= $(prefix)/lib ;
includedir ?= /usr/include ;
moddir ?= $(libdir)/initng ;
mandir ?= /usr/share/man ;
sysconfdir ?= $(prefix)/etc ;
localstatedir ?= $(prefix)/var ;

# Build defines. Don't add them as real parameters, just the define itself.
# Jam figures out what compiler command line switch to use itself.
DEFINES += HAVE_CONFIG_H _XOPEN_SOURCE=600 DEBUG ;

# Global C build and linker flags:
CCFLAGS += -std=c99 -Wall -O2 ;
CCFLAGS += -g -Werror -Wmissing-prototypes -Wmissing-declarations
    -Wstrict-prototypes -Wimplicit -Wredundant-decls -Wnested-externs
    -Wwrite-strings -Wsign-compare -Winline -Wswitch -Wreturn-type
    -Wparentheses -Wmissing-braces -Wformat -Wformat-nonliteral
    -Wformat-security -Wsequence-point -Wundef -Wunused -Wcomment ;
LINKFLAGS += -rdynamic -fPIC ;


### PART 2: USER-CONFIGURABLES
#
# This section holds parameters that are configurable by the user and have
# influence on the build. They mostly enable or disable certain features of
# InitNG.
#
# As above, please use the "-s" switch or environment variables!
#

if $(CHECK_RO) { DEFINES += CHECK_RO ; }
if $(FORCE_NOCOLOR) { DEFINES += FORCE_NOCOLOR ; }
if $(FORCE_POSIX_IFILES) { DEFINES += FORCE_POSIX_IFILES ; }


### PART 3: PATHS FOR 3RD-PARTY LIBRARIES
#
# This section includes variables that set up include or library paths for
# modules that need 3rd-party libraries like D-BUS or others.
#

DBUS_INCLUDES = $(pkg-config --cflags-only-I dbus-1) ;
DBUS_LIBS = $(pkg-config --cflags-only-I --cflags-only-l dbus-1) ;


### PART 4: CUSTOM RULES
#
# The following section houses rules that are used exclusively by InitNG's
# build system.
#

# Builds a static library from a set of subdirectories given as arguments to
# this rule. It takes care of creating the objects in the right place,
# cleaning up and running Ar. It does not, however, handle recursion.
rule LibraryFromSubdirs
{
    local _o = [ ObjectsFromSubdir $(>) ] ;
    LibraryFromObjects $(<) : $(_o) ;
}


# Does pretty much the same as LibraryFromSubdirs, but creates an executable
# instead.
rule MainFromSubdirs
{
    local _o = [ ObjectsFromSubdir $(>) ] ;
    MainFromObjects $(<) : $(_o) ;
}


# Workhouse for subdir compile. Iterates over all subdirectories given and
# turns the *.c sources found there into objects. Returns a list of all
# objects created.
# USAGE: ObjectsFromSubdir foo bar baz ;
rule ObjectsFromSubdir
{
    local _sources _objects _subdir ;
    
    for _subdir in $(<)
    {
        # Get all source files
        _sources = [ Glob [ FDirName $(SUBDIR) $(_subdir) ] : *.c ] ;

        # Adjust grist (otherwise we get $(SUBDIR) twice)
        _sources = $(_sources:D=$(_subdir)) ;

        # Keep track of the objects we're about to create
        _objects += $(_sources:S=$(SUFOBJ)) ;

        # Do the actual compile
        Objects $(_sources) ;
    }

    Clean clean : $(_objects) ;
    return $(_objects) ;
}


# Creates an InitNG module from a given subdirectory. Will automatically link
# it against libinitng.a, and build a shared library named by the scheme
# "mod$(SUBDIR)$(SUF)".
rule ModuleFromSubdir
{
    local _lib = mod$(<) ;
    local _obj = [ ObjectsFromSubdir $(<) ] ;

    LINKFLAGS on $(_lib) += -fPIC -rdynamic 
        -shared -Wl,-soname,$(_lib)
        -Wl,--whole-archive [ FDirName $(TOP) core libinitng$(SUFLIB) ] 
        -Wl,--no-whole-archive -ldl ;
    MainFromObjects $(_lib).so : $(_obj) ;

    Clean clean : $(_lib) ;
    return $(_lib) ;
}


# Creates a shared library from C sources. You need to supply the target's
# file name, nothing else happens here than adding the GCC linker flags to
# turn a binary into a shared object.
# USAGE: SharedLibrary NAME : SOURCE1 SOURCE2 ... SOURCEn ;
rule SharedLibrary
{
    LINKFLAGS on $(<) += -shared -Wl,-soname,$(<) ;
    Main $(<) : $(>) ;
}


# Does simple pattern substitution and creates an header file from an .h.in
# file. Takes the header file path as argument, not the .h.in.
# USAGE: GenHeader header1 header2 headerN ;
# EXAMPLE: GenHeader config.h initng-paths.h ;
actions GenHeader
{
    for h in $(<).in
    do
        cat "$h" | sed \
                -e 's,@VERSION@,$(VERSION),g' \
                -e 's,@VERSION_NAME@,$(VERSION_NAME),g' \
                -e 's,@RUNLEVEL_DEFAULT@,$(RUNLEVEL_DEFAULT),g' \
                -e 's,@RUNLEVEL_FAKE@,$(RUNLEVEL_FAKE),g' \
                -e 's,@PREFIX@,$(prefix),g' \
                -e 's,@BINDIR@,$(bindir),g' \
                -e 's,@LIBDIR@,$(libdir),g' \
                -e 's,@SYSCONFDIR@,$(sysconfdir),g' \
                -e 's,@LOCALSTATEDIR@,$(localstatedir),g' \
            > "${h%*.in}"
    done
}

rule GenHeader
{
    local _h ;
    for _h in $(<)
    {
        INCLUDES $(_h).in ;
    }
    Clean clean : $(<) ;
}


# Sets up housekeeping for an InitNG C source directory. It is basically the
# same as SubDir, but does some additional tasks to make life easier:
#   1. Calls "SubDir",
#   2. Adds $(TOP) and $(TOP)/include to the include path.
rule SrcDir
{
    SubDir $(<) ;
    SubDirHdrs $(TOP) ;
    SubDirHdrs $(TOP) include ;
}
