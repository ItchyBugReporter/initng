Hacking on InitNG
=================
Eric MSP Veith <eveith@wwweb-library.net>
Version 0.4

This file intends to give a short introduction to InitNG's sources and the
build system. It will try to outline a few good practices and finally contains
the code style convention used by this project. This document uses the
AsciiDoc markup language.

Build System
------------

InitNG is built using a combination of
http://nopcode.org/wk.php/Acr[ACR] and
http://www.perforce.com/jam/jam.html[Perforce Jam]. While it is not the
pourpose of this text to give a lengthy introduction to both tools, this
section will offer some advices on how to integrate new sources into the build
system.

ACR is a replacement for AutoConf. It provides a +configure+ script just
like the latter, but does not resort to the complex m4 macro language.
Instead, ACR is written purely in shell scripts. The syntax of the
+configure.acr+ file is word-based and only constructed out of ACR's language,
i.e. no embedded shell scripts as with AutoConf are allowed. Normally, one has
to touch +configure.acr+ rarely.

ACR does pattern substitution when advised with the +SUBDIRS+ stanza. The
command takes either the name to a target file (i.e., without the +.acr+
suffix) or a directory, in which case a +Makefile+ will be created from a
+Makefile.acr+ template. ACR then substitutes variables enclosed in +@+ signs,
e.g. +@SBINDIR@+.

The +configure+ script is most commonly used to enable or disable features at
compile time. ACR provides +ARG_ENABLE+ and +ARG_DISABLE+ for that pourpose.
The syntax is +ARG_ENABLE _VAR_ _ARG_ _DESCRIPTION_+. The latter can be a
free-form text; +_VAR_+ is the variable that ACR substitutes later on: It will
be set to 1 if the switch is given. +_ARG_+ is the second part of the switch
to configure, as in +--enable-_ARG_+. The same applies to +ARG_DISABLE+ with
the exception that the variable will be set to 0 if the argument is given.

ACR supports scanning for needed headers and functions: +CHECK_INCLUDE
_INCLUDE_+ is used for that, e.g. +CHECK_INCLUDE sys/wait.h+. +CHECK_FUNCTION
_LIB_ _FUNCTION_+ checks for the function _FUNCTION_ in the library _LIB_.
Finally, ACR incorporates the use of _pkg-config_ with +PKG_CONFIG _CFLAGS_
_LDFLAGS_ _PKG_+. This will check for the package _PKG_ and place the output
of +pkg-config --cflags+ in the first, and the result of +pkg-config
--ldflags+ in the second variable. Those, in turn, can be subsituted in file
mentioned with +SUBDIRS+.

The results of pkg-config queries should be placed in +config.jam.acr+.
Although it would be possible to create another file for that, e.g. in the
sub-directory where the output is actually needed, it doesn't help: Jam does
not derive any kind of namespacing from file inclusion; any variable ends up
in the global name space. Additional to +config.jam.acr+, the +config.h.acr+
header file exists for supplying defintions.

The +config.jam.acr+ file is included in +Jamrules+. The latter file carries
additional rules and a little bit of variable set-up for the build process.
The file is heavily documented, so that an extensive introduction should not
seem necessary. Some rules are widely used in the build process and will be
mentioned here.

+SrcDir+ is an addition to the +SubDir+ rule Jam already has and additionally
sets up InitNG's local include directory. It can be used in the same fashion,
e.g. +SrcDir TOP modules dbus_event+. This rule is required to be the first
statement in every +Jamfile+.

Especially for the modules, the rule +SharedLibrary+ creates a shared object
(first parameter) from the given C source files (following arguments). It
automatically sets the +soname+ attribute on the newly created library if a
version number is appended. For example, using +SharedLibary libfoo.so : foo.c
bar.c ;+ will create no +soname+ attribute, while both +SharedLibrary
libfoo.so.1 : foo.c bar.c ;+ and +SharedLibrary libfoo.so.1.1 : foo.c bar.c ;+
will add the +soname libfoo.so.1+.

Finally, when using pkg-config, the rule +PkgConfig+ comes handy: It extracts
the include directories from the C flags pkg-config returns and hands them
over to the +SubDirHdrs+ rule. It assumes that the variable is named in the
schema of +ARG_CFLAGS+, with +_ARG_+ being the first and only argument to the
rule: +PkgConfig DBUS ;+ examines the contents of +DBUS_CFLAGS+ for include
directories.

Extesive documentation to Jam can be found on the web page mentioned above.
For ACR, the man page to configure.acr(5) will give enough information.

Coding Style Guidelines
-----------------------

C Source Code
~~~~~~~~~~~~~

Please supply clean code. The minimum requirement for ``clean code'' is that
it compiles without warnings. The warning flags passed to the compiler are
defined in +Jamrules+ together with +-Werror+, which means that every warning
is treated as an error. Don't change that behaviour: There is most often a
reason for the warning that makes sense.

Everything that is part of the public API of InitNG must be prefixed with
+initng_+. Basically, this means every variable or function whose symbol is
exported, i.e. everything that is mentioned in a header file and not declared
as +static+.

Write documentary comments. Please leave rather more than less comments. At
least supply a *Doxygen* header on each function, at best in the corresponding
header file where it is declared. Complex parts should also have a little
explanation. Please don't use C99-style comments, but resort to the
traditional style (+/* ... */+).

[source,c]
----
/**
 * <Short description>
 *
 * [@param <Param_1 description>]
 * [@param <Param_n description>]
 * [@return <return value description>]
 *
 * [Long description]
 * [@see <reference to other relevant function>]
 */
----

Use blank lines generously. In general, place two blank lines between two
functions. Blank lines are the most important tool a programmer has to
organize his code: Use them wisely.

InitNG's core set provides wrappers or a replacement for some of the common
functions, e.g. +malloc()+. Please use them: They contain additional checks
the are to prevent a programmer from common mistakes like not checking for
return values. There are also modules for storing data in lists, stacks or
trees or for reading into a buffer.

A line breaks at char 78.

Indentation is done by a tab character with a width of 8. If you have to break
a line -- although it's usually a sign of bad code flow if you have to, since
you cram to much into one line and don't structurize enough -- indent the
second line by two tabs, and split it before an operator:

[source,c]
----
int function_with_a_long_name(int before_break,
		int after_break)
{
	int ret = 0;
	if(before_break << 2 & after_break << 4 == 0xfe
			|| before_break << 1 == 0xff) {
		ret = 0xfe + before_break << 1
				- after_break << 4;
	}
	return ret;
}
----

If you use indent, run it with these parameters: +indent -npro -kr -ts8 -i8
-sob -l78 -ss -ncs+

As you might have noticed, opening curly braces are placed on the same line as
the statement, and the closing in the same column as the first char of the
statement, except for function definitions, where one inserts a newline before
the opening curly brace.

Generally, function definitions are written in one line, i.e. no GNU style
placing of the return type in an extra line. The defintion of a function
starts in column 1.

[source,c]
----
/**
 * This function does nothing meaningful.
 */
void initng_foo (int i)
{
	int *output = initng_malloc (sizeof (int));
	*output = i;

	if (i < 5 && i > 100
			|| i < 0 && i > -100) {
		printf("This check makes no sense; "
				"but it is true.\n");
	} else {
	        printf("This check makes no sense, "
			"and it evaluated false. "
			"God knows what this may be.\n");
	}
}
----

Add curly braces to single line blocks to avoid mistakes. For
the same reason, each statement belongs on a separate line.

[source,c]
----
if(foo) {
	++foo;
	bar;
}
----

The braces the follow function calls and statements like +if+, +while+, and so
on, do not have spaces around them. Similarly avoid unnecessary spaces after
sigils (e.g., +&+ and +*+ for pointers). Most binary, however, operators with
the exception of +.+ and +->+ want a space, though; also place one space
character after a comma and before a curly brace:

[source,c]
----
initng_foo *b = NULL;
while(initng_func(a, *b, c, d)) {
	initng_do_stuff(&a);
	printf("%i\n", a.i);
	b->foo = a.i + 1;
}
----

The +switch+ statement should be aligned this way:

[source,c]
----
switch (x) {
case Y:
case Z:
default:
	break;
}
----

Whenever the return value of a function signifies success or failure, use only
0 for failure and 1 for success to make it possible to evaluate it in boolean
context. If a more complex status indication is needed, resort to a
+errno+-style way and use the following convection:

* x < 0 means error, with x beeing the error code,
* x == 0 indicates success (don't confuse with the return code!), and
* x > 0 adds a status to the success.

InitNG Boot Scripts
~~~~~~~~~~~~~~~~~~~

Adhere to a POSIX style and avoid bashisms. This includes many forms of
sophisticated variable expensions (use eval, expr, grep, sed, awk and the
likes) and the use of Bash's internal +[[+ operator that does not call test.

Like with the C code, use tab characters with 8 spaces width for indentation.

Curly braces stand behind the function. Keep the +then+, +do+, etc. keywords
on the same line:

[source,sh]
----
foo() {
	if [ "$#" -gt 2 ]; then
		echo "More than two!"
	fi
}
----

Be sure to use quotation marks whenever an external application is called.
Also add curly braces to variables for clarification: +${var}+.

Add @-marks around every call to a program to allow the preprocessor insert
the full path. Don't let the @s surround the parameters to the binary!

Be sure to leave no space between the hash sign (#) and the preprocessor
directive, and don't indent the macros. In contrast, a regular shell script
comment _must_ have a space character after the hash mark:

[source,sh]
----
#if quux

# We're in quux mode, do stuff.
a=${b}

#endif
----
